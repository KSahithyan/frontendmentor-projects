{"version":3,"sources":["components/Country-card.js","pages/Home.js","pages/Details.js","App.js","serviceWorker.js","index.js"],"names":["CountryCard","n","toLocaleString","country","this","props","data","className","darktheme","src","flag","style","width","alt","name","formatNumber","population","region","capital","React","Component","Home","console","log","state","darkTheme","location","countries","searchTerm","changeTheme","bind","setState","fetch","response","json","getData","filter","toLocaleUpperCase","includes","toString","htmlFor","type","id","display","onInput","xmlns","height","viewBox","d","fill","stroke","event","persist","target","value","map","to","pathname","selectedCountry","textDecoration","key","Details","points","x1","y1","x2","y2","maxWidth","alignSelf","justifySelf","nativeName","subregion","topLevelDomain","domainName","currencies","currency","join","languages","language","borders","borderCountryCode","borderCountry","find","alpha3Code","App","basename","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f89fd274.chunk.js","sourcesContent":["import React from 'react'\r\nimport './../css/country-card.css'\r\nimport './../css/variables.css'\r\n\r\nclass CountryCard extends React.Component {\r\n    formatNumber(n = 0) {\r\n        return n.toLocaleString()\r\n    }\r\n\r\n    render() {\r\n        const country = this.props.data\r\n        return (\r\n            <div className=\"country-card-container\" darktheme={this.props.darktheme}>\r\n                <img src={country.flag} style={{ width: '100%' }} alt=\"country flag\" />\r\n                <div className=\"content\">\r\n                    <div className=\"name\">{country.name}</div>\r\n                    <div>\r\n                        <span className=\"content-type\">Population: </span>\r\n                        <span className=\"population\">{this.formatNumber(country.population)}</span>\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"content-type\">Region: </span>\r\n                        <span className=\"region\">{country.region}</span>\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"content-type\">Capital: </span>\r\n                        <span className=\"capital\">{country.capital}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryCard","import React from 'react'\r\nimport \"./../css/index.css\";\r\nimport './../css/variables.css';\r\nimport { CountryCard } from '../components';\r\nimport { Link } from 'react-router-dom';\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        console.log(props)\r\n        this.state = {\r\n            darkTheme: props.location.state ? props.location.state.darkTheme : false,\r\n            countries: [],\r\n            searchTerm: '',\r\n            region: ''\r\n        }\r\n        this.changeTheme = this.changeTheme.bind(this)\r\n    }\r\n\r\n    changeTheme() {\r\n        this.setState({ darkTheme: !this.state.darkTheme })\r\n    }\r\n\r\n    async getData() {\r\n        let response = await fetch('https://restcountries.eu/rest/v2/all')\r\n        let json = await response.json()\r\n\r\n        this.setState({ countries: json })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n\r\n    render() {\r\n        let countries = this.state.countries.filter((country) => {\r\n            return country.name.toLocaleUpperCase().includes(this.state.searchTerm.toLocaleUpperCase()) && (this.state.region === '' || country.region === this.state.region)\r\n        })\r\n        return (\r\n            <div className=\"container\" darktheme={this.state.darkTheme.toString()}>\r\n                <div className=\"top-bar\">\r\n                    <span className=\"logo\">Where in the world?</span>\r\n                    <label htmlFor=\"theme-toggle-checkbox\" className=\"theme-changer-container\">\r\n                        <input name=\"theme-toggler\" type=\"checkbox\" id=\"theme-toggle-checkbox\" style={{ display: 'none' }} onInput={this.changeTheme} />\r\n                        <span className=\"theme-changer\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" className=\"icon\">\r\n                                <path\r\n                                    d=\"M160,136c0-30.62,4.51-61.61,16-88C99.57,81.27,48,159.32,48,248c0,119.29,96.71,216,216,216,88.68,0,166.73-51.57,200-128-26.39,11.49-57.38,16-88,16C256.71,352,160,255.29,160,136Z\"\r\n                                    style={{ fill: this.state.darkTheme ? 'white' : 'none' }}\r\n                                />\r\n                            </svg>\r\n                            <span className=\"dark-mode-text\">\r\n                                Dark Mode\r\n                            </span>\r\n                        </span>\r\n                    </label>\r\n\r\n                </div>\r\n                <div className=\"search-container\">\r\n                    <div className=\"search-bar\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" className=\"icon\">\r\n                            <path\r\n                                d=\"M456.69,421.39,362.6,327.3a173.81,173.81,0,0,0,34.84-104.58C397.44,126.38,319.06,48,222.72,48S48,126.38,48,222.72s78.38,174.72,174.72,174.72A173.81,173.81,0,0,0,327.3,362.6l94.09,94.09a25,25,0,0,0,35.3-35.3ZM97.92,222.72a124.8,124.8,0,1,1,124.8,124.8A124.95,124.95,0,0,1,97.92,222.72Z\"\r\n                                style={{ stroke: this.state.darkTheme ? 'black' : 'white', fill: !this.state.darkTheme ? 'black' : 'white' }}\r\n                            />\r\n                        </svg>\r\n                        <input name=\"search\" type=\"text\" id=\"search-input\" className=\"search-input\" onInput={event => { event.persist(); this.setState({ searchTerm: event.target.value }) }} />\r\n                    </div>\r\n\r\n                    <select className=\"filter\" onInput={event => { event.persist(); this.setState({ region: event.target.value }) }}>\r\n                        <option value=\"\">Filter By Region</option>\r\n                        <option value=\"Africa\">Africa</option>\r\n                        <option value=\"Americas\">Americas</option>\r\n                        <option value=\"Asia\">Asia</option>\r\n                        <option value=\"Europe\">Europe</option>\r\n                        <option value=\"Oceania\">Oceania</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"countries\">\r\n                    {countries.map(country => {\r\n                        return (\r\n                            <Link to={{\r\n                                pathname: '/details',\r\n                                state: {\r\n                                    countries: this.state.countries,\r\n                                    selectedCountry: country,\r\n                                    darkTheme: this.state.darkTheme\r\n                                }\r\n                            }} style={{ textDecoration: 'none' }} key={country.name}>\r\n                                <CountryCard data={country} darktheme={this.state.darkTheme.toString()} />\r\n                            </Link>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\r\nimport \"./../css/details.css\";\r\nimport './../css/variables.css';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Details extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            darkTheme: props.location.state.darkTheme || false,\r\n            selectedCountry: props.location.state.selectedCountry,\r\n            countries: props.location.state.countries\r\n        }\r\n        this.changeTheme = this.changeTheme.bind(this)\r\n    }\r\n\r\n    changeTheme() {\r\n        this.setState({ darkTheme: !this.state.darkTheme })\r\n    }\r\n\r\n    render() {\r\n        let country = this.state.selectedCountry\r\n        let countries = this.state.countries\r\n        return (\r\n            <div className=\"container\" darktheme={this.state.darkTheme.toString()}>\r\n\r\n                <div className=\"top-bar\">\r\n                    <span className=\"logo\">Where in the world?</span>\r\n                    <label htmlFor=\"theme-toggle-checkbox\" className=\"theme-changer-container\">\r\n                        <input name=\"theme-toggler\" type=\"checkbox\" id=\"theme-toggle-checkbox\" style={{ display: 'none' }} onInput={this.changeTheme} />\r\n                        <span className=\"theme-changer\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" className=\"icon\">\r\n                                <path\r\n                                    d=\"M160,136c0-30.62,4.51-61.61,16-88C99.57,81.27,48,159.32,48,248c0,119.29,96.71,216,216,216,88.68,0,166.73-51.57,200-128-26.39,11.49-57.38,16-88,16C256.71,352,160,255.29,160,136Z\"\r\n                                    style={{ fill: this.state.darkTheme ? 'white' : 'none' }}\r\n                                />\r\n                            </svg>\r\n                            <span className=\"dark-mode-text\">\r\n                                Dark Mode\r\n                            </span>\r\n                        </span>\r\n                    </label>\r\n\r\n                </div>\r\n\r\n                <Link to={{\r\n                    pathname: '/',\r\n                    state: {\r\n                        darkTheme: this.state.darkTheme\r\n                    }\r\n                }} className=\"go-back\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\" className=\"icon\">\r\n                        <polyline points=\"244 400 100 256 244 112\" />\r\n                        <line x1=\"120\" y1=\"256\" x2=\"412\" y2=\"256\" />\r\n                    </svg>\r\n                    Back\r\n                </Link>\r\n\r\n                <div className=\"data-container\">\r\n                    <img src={country.flag} style={{ width: '100%', maxWidth: '36vw', alignSelf: 'center', justifySelf: 'center' }} alt=\"country flag\" />\r\n                    <div className=\"text-container\">\r\n                        <div className=\"country-name\">{country.name}</div>\r\n                        <div className=\"first-container\">\r\n                            <div>\r\n                                <span className=\"content-title\">Native Name: </span>\r\n                                <span className=\"country-content\">{country.nativeName}</span>\r\n                            </div>\r\n                            <div>\r\n                                <span className=\"content-title\">Population: </span>\r\n                                <span className=\"country-content\">{country.population.toLocaleString()}</span>\r\n                            </div>\r\n                            <div>\r\n                                <span className=\"content-title\">Region: </span>\r\n                                <span className=\"country-content\">{country.region}</span>\r\n                            </div>\r\n                            <div>\r\n                                <span className=\"content-title\">Sub Region: </span>\r\n                                <span className=\"country-content\">{country.subregion}</span>\r\n                            </div>\r\n                            <div>\r\n                                <span className=\"content-title\">Capital: </span>\r\n                                <span className=\"country-content\">{country.capital}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"second-container\">\r\n                            <div>\r\n                                <span className=\"content-title\">Top Level Domain: </span>\r\n                                {\r\n                                    country.topLevelDomain.map(domainName => {\r\n                                        return <span className=\"country-content\" key={domainName}>{domainName}</span>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                <span className=\"content-title\">Currencies: </span>\r\n                                {\r\n                                    country.currencies.map(currency => currency.name).join(', ')\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                <span className=\"content-title\">Languages: </span>\r\n                                {\r\n                                    country.languages.map(language => language.name).join(', ')\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"border-countries-container\">\r\n                            <div className=\"sub-title\">\r\n                                Border Countries:\r\n                            </div>\r\n                            {\r\n                                country.borders.map(borderCountryCode => {\r\n                                    let borderCountry = countries.find((value) => value.alpha3Code === borderCountryCode)\r\n\r\n                                    return (\r\n                                        <div key={borderCountryCode} className=\"border-country\">\r\n                                            <span>{borderCountry.name}</span>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Details","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Home, Details } from './pages'\n\nfunction App() {\n  return (\n    <Router basename={'/rest-countries-api-with-color-theme-switcher'}>\n      <Route exact path=\"/\" component={Home}></Route>\n      <Route exact path=\"/details\" component={Details}></Route>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}